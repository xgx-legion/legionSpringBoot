快速构建Spring Boot项目
website：Spring Initializr
url：http://start.spring.io/

Srping boot修改内置tomcat端口方法
方法一：Application实现EmbeddedServletContainerCustomizer接口
	 @Override
	 public void customize(ConfigurableEmbeddedServletContainer container){
	 	container.setPort(8088);
	 }
方法二：application.propeties修改默认配置
	 server.port=8088
	 
springboot官方模板引擎：Thymeleaf

WebJars

cygwin
是在Windows下面的Linux命令模拟器
最好的方式是用VirtualBox装一个Linux虚拟机，在虚拟机中进行这些尝试。


SprintBoot开发工具和博文
开发工具：Spring Tool Suite v_3.7.2（简称STS） 
官网地址：http://spring.io/tools/sts
https://blog.csdn.net/catoop/article/details/50501664

---------------- springBoot 全局配置器 ------------------
-----------------------------------------------------
@Configuration标记的类将被定义为全局配置器 
通过@Bean完成配置注册
link:GlobalConfiguration.java

------ springBoot Servlet/过滤器Filter/监听器listence --------
----------------------------------------------------------
在 SpringBootApplication上使用@ServletComponentScan 注解后
Servlet、Filter、Listener 可以直接通过 @WebServlet、@WebFilter、@WebListener 注解自动注册，无需其他代码

在全局配置器中手动添加自定义过滤器
@Bean
public FilterRegistrationBean filterRegistration() {
	FilterRegistrationBean registration = new FilterRegistrationBean();
	registration.setFilter(new ManageFilter());
	registration.addUrlPatterns("/*");
	registration.addInitParameter("paramName", "paramValue");
	registration.setName("ManageFilter");
	registration.setOrder(1);
	return registration;
}


------------------ springBoot 拦截器   -----------------------
----------------------------------------------------------
1.实现spring的HandlerInterceptor接口（或继承HandlerInterceptorAdapter），添加@Component注解
2.继承WebMvcConfigurerAdapter，并重写addInterceptors方法
3.实例化自动以拦截器，然后在addInterceptors中手动添加到拦截器链中
@Override
public void addInterceptors(InterceptorRegistry registry) {
	// 多个拦截器组成一个完整的拦截器链
	// addPathPatterns用于添加拦截规则；excludePathPatterns用于排除拦截（白名单）
	registry.addInterceptor(new ManageCoreInterceptor())
		.addPathPatterns("/**")
		.excludePathPatterns("/demo/test");
	super.addInterceptors(registry);
}


------------------ springBoot 日志输出  -----   --------------
----------------------------------------------------------
***springBoot自带日志输出机制
1.添加日志输出配置，有两种方法
方法一：创建logback.xml文件
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <logger name="org.springframework.web" level="DEBUG"/>
    <logger name="org.springboot.sample" level="TRACE" />
    
    <!-- 节点配置，不同环境定义不同的日志输出 -->
    <springProfile name="dev">
        <logger name="org.springboot.sample" level="DEBUG" />
    </springProfile>
    <springProfile name="staging">
        <logger name="org.springboot.sample" level="INFO" />
    </springProfile>
</configuration>

方法二：在application.properties中直接配置
logging.level.org.springframework.web=DEBUG
logging.level.org.springboot.sample=TRACE

注意：如果两种方法存在相同的配置，properties中的优先级高于xml

2.代码测试
private static final Logger logger = LoggerFactory.getLogger(SpringBootSampleApplication.class);


***SLF4J
1.依赖jar包
slf4j-api-1.8.0.jar
log4j-1.2.17.jar
slf4j-log4j12-1.8.0-alpha2.jar

2.配置log4文件
# rootLogger参数分别为：根Logger级别，输出器stdout，输出器log
log4j.rootLogger = info,stdout,log

# 输出信息到控制台
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %d [%-5p] %l %rms: %m%n

# 输出DEBUG级别以上的日志到D://logs/debug.log
log4j.appender.log = org.apache.log4j.DailyRollingFileAppender
log4j.appender.log.DatePattern = '.'yyyy-MM-dd
log4j.appender.log.File = D://debug.log
log4j.appender.log.Encoding = UTF-8
#log4j.appender.log.Threshold = INFO
log4j.appender.log.layout = org.apache.log4j.PatternLayout
log4j.appender.log.layout.ConversionPattern = %d [%-5p] (%c.%t): %m%n


3.代码测试
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

private static final Logger logger = LoggerFactory.getLogger(LoggerTest.class);

logger.info("Current Time: {}", System.currentTimeMillis());
logger.trace("trace log");
logger.warn("warn log");
logger.debug("debug log");
logger.info("info log");
logger.error("error log");





















商家系统是面向使用智付支付系统的商家推出的一套综合信息管理的B/S应用软件。向商家提供用户管理、支付管理、交易管理、结算管理、特色服务、余额查询、海关推单、银联代扣等优质服务功能，旨在让商家更加方便快捷地管理自己的信息。
总后台系统是面向智付支付公司内部人员使用的后台操作系统。显示和操作各部门想要的数据。
代理商后台是智付支付为企业下，超级代理商、代理商、会员类型服务商、服务商提供的一套完整的业务管理平台。提供用户管理，代理商管理，交易管理，报表管理，业务申请，结算管理，会员管理，帮助等优质服务功能。
构造一个平台，让智付支付的代理商除了可以发展智付支付的商户之外，还可以去推广其他的产品，增加代理商收益，同时借助集团的营销团队和智付支付的代理商资源，帮助集团下面其他子公司发展业务，第一期主要把系统框架搭起来，所推广业务为 为集团下面四方支付公司发展商户，代理商获得持续收益的，后期陆续探索其他的业务模式。